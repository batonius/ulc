use terms::{Term, Variable, RcTerm};
use builtin::BuiltinType;
use std::str::FromStr;
use types::{TermType, RcTermType, TypeVariable, Kind, RcKind, Sort, RcSort};

grammar;

pub Term: RcTerm = {
    <Abs>,
    <If>,
    <Appl>,
    "let" <v:Var> "=" <t:Term> "in" <b:Term> => Term::appl_rc(Term::abs_rc(v, b), t)
};

SimpleTerm: RcTerm = {
    "(" <Term> ")",
    Num => Term::num_lit_rc(<>),
    Bool => Term::bool_lit_rc(<>),
    Builtin => Term::builtin_rc(<>, vec![]),
    Var => Term::var_rc(<>),
    "[" <Type> "]" => Term::type_rc(<>)
};

Num: isize = {
    r"[0-9]+" => isize::from_str(<>).unwrap()
};

Bool: bool = {
    "true" => true,
    "false" => false
};

Builtin: BuiltinType = {
    "+" => BuiltinType::Add,
    "-" => BuiltinType::Sub,
    "*" => BuiltinType::Mul,
    "/" => BuiltinType::Div,
    "=" => BuiltinType::Eq,
};

Var: Variable = {
    <n:r"[a-z][a-zA-Z0-9]*"> <s:( ":" <Sort>)?> => {
        if let Some(s) = s {
            Variable::with_sort(n, s)
        } else {
            Variable::new(n)
        }
    }
};

Abs: RcTerm = {
    r"\\" <v:Var> "." <t:Term> => Term::abs_rc(v, t),
};

Appl: RcTerm = {
    Appl SimpleTerm => Term::appl_rc(<>),
    <SimpleTerm>
};

If: RcTerm = {
    "if" <Term> "then" <Term> "else" <Term> => Term::if_rc(<>)
};

PiType: RcTermType = {
    r"\\" <TypeVar> "." <Type> => TermType::new_pi(<>)
};

TypeVar: TypeVariable = {
    <n:r"[a-z][a-zA-Z0-9]*"> <k:( ":" <Kind>)?> => {
        if let Some(k) = k {
            TypeVariable::new(n, k)
        } else {
            TypeVariable::new(n, Kind::new_star())
        }
    }
};

NamedType: RcTermType = {
    r"[A-Z][a-zA-Z0-9]*" => TermType::new_named(<>)
};

SimpleType: RcTermType = {
    "(" <Type> ")",
    "Int" => TermType::new_int(),
    "Bool" => TermType::new_bool(),
    TypeVar => TermType::new_var(<>),
    <NamedType>,
};

ArrowType: RcTermType = {
    <SimpleType> "->" <Type> => TermType::new_arrow(<>),
    <SimpleType>
};

pub Type: RcTermType = {
    <PiType>,
    <ArrowType>
};

StarKind: RcKind = {
    "*" => Kind::new_star()
};

Kind: RcKind = {
    <StarKind> "=>" <Kind> => Kind::new_arrow(<>),
    <StarKind>
};

Sort: RcSort = {
    <Kind> => Sort::new_kind(<>),
    <Type> => Sort::new_type(<>)
};
